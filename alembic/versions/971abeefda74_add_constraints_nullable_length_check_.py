"""Add constraints (nullable, length, check) and change phone_number type

Revision ID: 971abeefda74
Revises: 38507fe42c20
Create Date: 2025-04-17 10:54:18.266359

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '971abeefda74'
down_revision: Union[str, None] = '38507fe42c20'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - START ###
    # Keep the drop table as discussed
    op.drop_table('events_backup')

    # --- Clients Table ---
    op.alter_column('clients', 'fullname',
               existing_type=sa.VARCHAR(),
               type_=sa.String(length=100),
               nullable=False)
    op.alter_column('clients', 'email',
               existing_type=sa.VARCHAR(),
               type_=sa.String(length=100),
               nullable=False)
    op.alter_column('clients', 'phone_number',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=20),
               nullable=False,
               postgresql_using='phone_number::text')
    op.alter_column('clients', 'enterprise',
               existing_type=sa.VARCHAR(),
               type_=sa.String(length=100),
               nullable=False)
    op.alter_column('clients', 'create_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('clients', 'sales_contact_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    # --- Contracts Table ---
    op.alter_column('contracts', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('contracts', 'amount',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.create_check_constraint(
        "ck_contract_amount_non_negative",
        "contracts",
        sa.column('amount') >= 0
    )
    op.alter_column('contracts', 'remaining_amount',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.create_check_constraint(
        "ck_contract_remaining_amount_non_negative",
        "contracts",
        sa.column('remaining_amount') >= 0
    )
    op.alter_column('contracts', 'create_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('contracts', 'status',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('contracts', 'sales_contact_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    # --- Departments Table ---
    op.alter_column('departments', 'departement_name',
               existing_type=sa.VARCHAR(),
               type_=sa.String(length=100),
               nullable=False)

    # --- Events Table ---
    op.alter_column('events', 'name',
               existing_type=sa.VARCHAR(),
               type_=sa.String(length=100),
               nullable=False)
    op.alter_column('events', 'contract_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('events', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('events', 'start_event',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('events', 'end_event',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('events', 'location',
               existing_type=sa.VARCHAR(),
               type_=sa.String(length=255),
               nullable=False)
    op.alter_column('events', 'attendees',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_check_constraint(
        "ck_event_attendees_non_negative",
        "events",
        sa.column('attendees') >= 0
    )
    op.alter_column('events', 'notes',
               existing_type=sa.VARCHAR(),
               type_=sa.String(length=500),
               existing_nullable=True)

    # --- Users Table ---
    op.alter_column('users', 'fullname',
               existing_type=sa.VARCHAR(),
               type_=sa.String(length=100),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               type_=sa.String(length=100),
               nullable=False)
    op.alter_column('users', 'password',
               existing_type=sa.VARCHAR(),
               type_=sa.String(length=255),
               nullable=False)
    op.alter_column('users', 'departement_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - START ###
    # --- Users Table ---
    op.alter_column('users', 'departement_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('users', 'password',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'fullname',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(),
               nullable=True)

    # --- Events Table ---
    op.drop_constraint("ck_event_attendees_non_negative", "events", type_="check")
    op.alter_column('events', 'attendees',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('events', 'location',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('events', 'end_event',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('events', 'start_event',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('events', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('events', 'contract_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('events', 'name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('events', 'notes',
                existing_type=sa.String(length=500),
                type_=sa.VARCHAR(),
                existing_nullable=True)

    # --- Departments Table ---
    op.alter_column('departments', 'departement_name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(),
               nullable=True)

    # --- Contracts Table ---
    op.alter_column('contracts', 'sales_contact_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('contracts', 'status',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('contracts', 'create_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_constraint("ck_contract_remaining_amount_non_negative", "contracts", type_="check")
    op.alter_column('contracts', 'remaining_amount',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.drop_constraint("ck_contract_amount_non_negative", "contracts", type_="check")
    op.alter_column('contracts', 'amount',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('contracts', 'client_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    # --- Clients Table ---
    op.alter_column('clients', 'sales_contact_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('clients', 'create_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('clients', 'enterprise',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('clients', 'phone_number',
               existing_type=sa.String(length=20),
               type_=sa.INTEGER(),
               nullable=True,
               postgresql_using='phone_number::integer')
    op.alter_column('clients', 'email',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('clients', 'fullname',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(),
               nullable=True)

    # Recreate the backup table if downgrading
    op.create_table('events_backup',
        sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('contract_id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('start_event', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column('end_event', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column('support_contact_id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('attendees', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('notes', sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    # ### end Alembic commands ###
